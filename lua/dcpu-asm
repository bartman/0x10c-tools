#!/usr/bin/lua

require "posix"
local source = debug.getinfo(1).source
local dir = string.match(source, "@(.*)/[^/]*")
if dir then
        local link = posix.readlink(source:match("@(.*)"))
        if link then
                source = dir .. '/' .. link
                dir = string.match(source, "(.*)/[^/]*")
        end
end
if dir then
        package.path = dir .. '/?.lua;' .. package.path
end

local DD = require 'dcpu16.defs'
local DP = require 'dcpu16.parser'
local DA = require 'dcpu16.assembler'
require 'dcpu16.util'

require 'dumper'
local function dump(...)
    print(DataDumper(...))
end


-- parse a file into a parse tree

local function parse_file(file)
        local d = DP.new()

        local f = assert(io.open(file))
        local program = f:read'*all'
        f:close()

        local res, suc, msg = d:newparse(program)

        if msg then print("\n"..msg.."\n") end
        if not suc then os.exit(1) end

        return res
end

local function assemble(prog)
        local a = DA.new()

        a:append(prog)

        return a
end


------------------------------------------------------------------------

local infile
local outfile
local endian = 'B'

local long_options = {
        help='h',
        debug='d',
        output='o',
        be='b',
        le='l',
}
long_options['big-endian']='b'
long_options['little-endian']='l'

local option_handlers = {
        h=function(arg,i)
                print("dcpu-asm [options...] <infile>\n"
                .."\n"
                .." -h --help               - print this help\n"
                .." -d --debug              - turn on debug\n"
                .." -o --output <bin>       - where to write output\n"
                .." -l --le --little-endian - generate little endian file\n"
                .." -b --be --big-endian    - generate big endian file (default)\n"
                )
                os.exit(0)
        end,
        d=function(arg,i)
                debug_level = debug_level + 1
                return 0
        end,
        o=function(arg,i)
                outfile = arg[i]
                return 1
        end,
        l=function(arg,i)
                endian = 'L'
                return 0
        end,
        b=function(arg,i)
                endian = 'B'
                return 0
        end,
        _=function(arg,i)
                if infile then
                        die"can only specify input file once"
                end
                infile = arg[i]
                return 1
        end
}

parse_args(arg, option_handlers, long_options)


if infile == nil then
        die(arg[0].." [options...] <program.dasm>")
end

if outfile == nil then
        local dir, base, ext = split_file_name(infile)

        if base == nil then
                outfile = infile..".out"
        else
                outfile = base..".out"
        end
        io.stderr:write("output going to "..outfile.."\n")
end

local prog = parse_file(infile)
local a = assemble(prog)

if debug_level > 0 then
        a:dump()
end

local f = assert(io.open(outfile, "w+"))
a:write(f, endian)

