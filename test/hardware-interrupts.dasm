        ; set the interrupt handler, and disable queueing
        IAS handler
        IAQ 0

        ; enumerate all devices
        HWN Z

:hw_enum_again
        SUB Z, 1
        IFN EX, 0
          SET PC, hw_enum_done

        HWQ Z

        ; check if it's a clock
        IFE A, 0xb402
          IFE B, 0x12d0
            SET [clock_dev], Z

        SET PC, hw_enum_again
:hw_enum_done

        ; did we find a clock?
        IFE [clock_dev], 0xFFFF
          SET PC, end

        ; configure the clock
        SET A, 0
        SET B, 1
        HWI [clock_dev]

        ; read the tick counter once
        SET A, 1
        HWI [clock_dev]
        SET B, C

        ; now wait for the tick counter to advance once
:wait_for_tick
        SET A, 1
        HWI [clock_dev]
        IFE B, C
          SET PC, wait_for_tick
        
        ; and finally enable interrupts
        SET A, 2
        SET B, 0x1234
        HWI [clock_dev]

        SET C, 0xFFFF         ; constrain the wait to 0xFFFF cycles
:wait_for_int
        SUB C, 1
        IFE [int_msg], 0
          IFG C, 0            ; timeout
            SET PC, wait_for_int

        ; pull out the results
        SET I, [int_msg]
        SET J, [int_cnt]

:end    HCF 0
        SET PC, end


:handler
        SET [int_msg], A
        ADD [int_cnt], 1
        RFI 0

:clock_dev
        dat 0xFFFF

:int_msg
        dat 0

:int_cnt
        dat 0
